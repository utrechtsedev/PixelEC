<div class="p-4 bg-base-300 rounded-lg shadow-md">
  <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">Categories</h2>
      <button 
          class="btn btn-error btn-sm" 
          disabled={selectedCategories.size === 0}
          on:click={handleDelete}
      >
          Delete Selected ({selectedCategories.size})
      </button>
  </div>

  <div class="overflow-x-auto bg-base-100 rounded-lg">
      <table class="table">
          <thead>
              <tr>
                  <th>
                      <label>
                          <input 
                              type="checkbox" 
                              class="checkbox checkbox-xs" 
                              checked={allSelected}
                              on:change={toggleAll}
                          />
                      </label>
                  </th>
                  <th>Name</th>
                  <th>Description</th>
                  <th>Child Categories</th>
                  <th>Created At</th>
              </tr>
          </thead>
          <tbody>
              {#each parentCategories as category (category.category_id)}
                  <tr>
                      <td>
                          <label>
                              <input
                                  type="checkbox"
                                  class="checkbox checkbox-xs"
                                  checked={selectedCategories.has(category.category_id)}
                                  on:change={() => toggleCategory(category.category_id)}
                              />
                          </label>
                      </td>
                      <td class="font-medium">{category.name}</td>
                      <td class="text-sm text-gray-500">{category.description}</td>
                      <td>
                          {#if childCategoriesMap[category.category_id]?.length}
                              <div class="dropdown dropdown-hover">
                                  <div 
                                      tabindex="0" 
                                      role="button" 
                                      class="btn btn-xs"
                                      class:btn-active={expanded[category.category_id]}
                                      on:click={() => toggleDropdown(category.category_id)}
                                  >
                                      {childCategoriesMap[category.category_id].length}
                                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transition-transform {expanded[category.category_id] ? 'rotate-180' : ''}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                      </svg>
                                  </div>
                                  {#if expanded[category.category_id]}
                                      <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52 mt-1">
                                          {#each childCategoriesMap[category.category_id] as child}
                                              <li>
                                                  <div class="flex items-center justify-between">
                                                      <span>{child.name}</span>
                                                      <input
                                                          type="checkbox"
                                                          class="checkbox checkbox-xs"
                                                          checked={selectedCategories.has(child.category_id)}
                                                          on:change={() => toggleCategory(child.category_id)}
                                                      />
                                                  </div>
                                              </li>
                                          {/each}
                                      </ul>
                                  {/if}
                              </div>
                          {:else}
                              <span class="text-xs text-gray-400">No children</span>
                          {/if}
                      </td>
                      <td>
                          {new Date(category.created_at).toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                          })}
                      </td>
                  </tr>
              {/each}
          </tbody>
      </table>
  </div>
</div>

<script>
  import { onMount } from 'svelte';
  
  export let data;
  
  let categories = data;
  let selectedCategories = new Set();
  let expanded = {};
  
  // Reactive declarations
  $: parentCategories = categories.filter(c => c.parent_id === null);
  $: childCategoriesMap = parentCategories.reduce((acc, parent) => {
      acc[parent.category_id] = categories.filter(c => c.parent_id === parent.category_id);
      return acc;
  }, {});
  $: allSelected = parentCategories.length > 0 && 
      parentCategories.every(c => selectedCategories.has(c.category_id)) &&
      Object.values(childCategoriesMap).every(children => 
          children.every(c => selectedCategories.has(c.category_id))
      );
  
  // Initialize expanded state
  onMount(() => {
      expanded = parentCategories.reduce((acc, category) => {
          acc[category.category_id] = false;
          return acc;
      }, {});
  });

  const toggleCategory = (id) => {
      selectedCategories = new Set(selectedCategories);
      if (selectedCategories.has(id)) {
          selectedCategories.delete(id);
      } else {
          selectedCategories.add(id);
      }
  };
  
  const toggleAll = () => {
      if (allSelected) {
          selectedCategories = new Set();
      } else {
          const allIds = [
              ...parentCategories.map(c => c.category_id),
              ...Object.values(childCategoriesMap).flat().map(c => c.category_id)
          ];
          selectedCategories = new Set(allIds);
      }
  };
  
  const toggleDropdown = (categoryId) => {
      expanded = {...expanded, [categoryId]: !expanded[categoryId]};
  };
  
  const handleDelete = () => {
      console.log('Deleting categories:', Array.from(selectedCategories));
      selectedCategories = new Set();
  };
</script>
